{
  "name": "appointment-manager-get-slots",
  "nodes": [
    {
      "parameters": {
        "operation": "concatenateItems",
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "response",
        "include": "allFieldsExcept",
        "fieldsToExclude": "sort",
        "options": {}
      },
      "id": "e3084062-5b99-4fd0-aa1a-d4ba4e5d3fe1",
      "name": "Format response",
      "type": "n8n-nodes-base.itemLists",
      "position": [
        1984,
        464
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "operation": "sort",
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "sort"
            }
          ]
        },
        "options": {}
      },
      "id": "dc33e5a2-a59b-4c49-9040-93f8420e235f",
      "name": "Sort",
      "type": "n8n-nodes-base.itemLists",
      "position": [
        1744,
        464
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "jsCode": "// Input data\nconst inputData = $input.all()[0].json.response;\n\n// Define workday hours in CST\nconst WORKDAY_START = \"09:00:00 CST\";\nconst WORKDAY_END = \"18:00:00 CST\";\nconst SLOT_DURATION = 60 * 60 * 1000; // N minutes in milliseconds\n\n// Helper to parse CST datetime strings\nconst parseCST = (datetime) => {\n  const parsedDate = new Date(datetime.replace(\" CST\", \"-06:00\"));\n  return isNaN(parsedDate) ? null : parsedDate;\n};\n\n// Function to generate N-minute start times\nconst generateStartTimes = (start, end) => {\n  const startTimes = [];\n  let current = new Date(start);\n\n  while (current < end) {\n    startTimes.push(\n      current.toLocaleTimeString('en-US', {\n        timeZone: 'Etc/GMT+6',\n        hour: '2-digit',\n        minute: '2-digit',\n      })\n    );\n    current = new Date(current.getTime() + SLOT_DURATION);\n  }\n\n  return startTimes;\n};\n\n// Function to find wide open ranges\nconst findWideOpenRanges = (startTimes) => {\n  if (startTimes.length < 3) return []; // Not enough slots for a wide open range\n\n  const ranges = [];\n  let rangeStart = null;\n  let consecutiveCount = 0;\n\n  for (let i = 0; i < startTimes.length - 1; i++) {\n    const currentTime = parseCST(`2000-01-01 ${startTimes[i]} CST`);\n    const nextTime = parseCST(`2000-01-01 ${startTimes[i + 1]} CST`);\n    const diff = nextTime - currentTime;\n\n    if (diff === SLOT_DURATION) {\n      consecutiveCount += 1;\n      if (rangeStart === null) rangeStart = startTimes[i];\n    } else {\n      if (consecutiveCount >= 2) {\n        ranges.push(`${rangeStart} to ${startTimes[i]}`);\n      }\n      rangeStart = null;\n      consecutiveCount = 0;\n    }\n  }\n\n  // Handle the final range\n  if (consecutiveCount >= 2) {\n    ranges.push(`${rangeStart} to ${startTimes[startTimes.length - 1]}`);\n  }\n\n  return ranges;\n};\n\n// Group meetings by date, ignoring invalid dates\nconst meetingsByDate = inputData.reduce((acc, meeting) => {\n  const start = parseCST(meeting.start);\n  const end = parseCST(meeting.end);\n\n  if (!start || !end) {\n    return acc; // Ignore invalid dates\n  }\n\n  const dateKey = start.toISOString().split('T')[0];\n\n  if (!acc[dateKey]) {\n    acc[dateKey] = [];\n  }\n\n  acc[dateKey].push({ start, end });\n  return acc;\n}, {});\n\n// Generate availability\nconst availability = Object.keys(meetingsByDate)\n  .filter((date) => {\n    // Exclude Saturdays (6) and Sundays (0)\n    const dayOfWeek = new Date(date).getUTCDay();\n    return dayOfWeek !== 0 && dayOfWeek !== 6;\n  })\n  .map((date) => {\n    const workdayStart = parseCST(`${date} ${WORKDAY_START}`);\n    const workdayEnd = parseCST(`${date} ${WORKDAY_END}`);\n\n    const dayMeetings = meetingsByDate[date].sort((a, b) => a.start - b.start);\n\n    let availableStartTimes = [];\n    let lastEnd = workdayStart;\n\n    for (const meeting of dayMeetings) {\n      if (meeting.start > lastEnd) {\n        availableStartTimes = availableStartTimes.concat(generateStartTimes(lastEnd, meeting.start));\n      }\n      lastEnd = meeting.end > lastEnd ? meeting.end : lastEnd;\n    }\n\n    if (lastEnd < workdayEnd) {\n      availableStartTimes = availableStartTimes.concat(generateStartTimes(lastEnd, workdayEnd));\n    }\n\n    const wideOpenRanges = findWideOpenRanges(availableStartTimes);\n\n    return {\n      date: new Date(date).toLocaleDateString('en-US', {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n      }),\n      availableStartTimes,\n      wideOpenRanges,\n    };\n  });\n\n// Format output as plaintext\nconst availableTimes = availability\n  .map(({ date, availableStartTimes, wideOpenRanges }) => {\n    const times = availableStartTimes.map((time) => `- ${time}`).join('\\n');\n    const ranges = wideOpenRanges.length\n      ? `Wide Open Ranges:\\n${wideOpenRanges.map((range) => `- ${range}`).join('\\n')}`\n      : \"Wide Open Ranges: None\";\n\n    return `### ${date}\\nAvailable Start Times:\\n${times}\\n\\n${ranges}`;\n  })\n  .join('\\n\\n');\n\n// Set the output\nreturn {\n  json: {\n    availableTimes,\n  },\n};\n"
      },
      "id": "cf27ab7b-c7b7-4df8-9605-90d291ac404d",
      "name": "Available Start Times & Ranges",
      "type": "n8n-nodes-base.code",
      "position": [
        2224,
        464
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const flattenSlots = (data) => {\n  // If data is missing or empty, return an empty array of slots\n  if (!data) {\n    return { slots: [] };\n  }\n\n  // data is an object whose keys are dates\n  // each date key has an array of slot objects\n  // we just need to flatten them all into one array\n  const flattened = Object.values(data).flat();  // merges all arrays from each date key\n\n  // Return a new object with a single 'slots' array\n  return { slots: flattened };\n};\n\n// Then assign the flattened slots back to $input.item.json.data\nconsole.log($input.item.json.data);\n$input.item.json.data = flattenSlots($input.item.json.data);\nreturn $input.item;\n"
      },
      "id": "870b8cbc-8a04-4134-bb32-3ed471b5df9d",
      "name": "Flatten Slots",
      "type": "n8n-nodes-base.code",
      "position": [
        2448,
        464
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function formatTimeSlot(dateString) {\n  // Format options for date/time with America/Chicago timezone\n  const options = {\n    timeZone: 'America/Chicago',\n    weekday: 'long',\n    month: 'long',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  };\n\n  // Create a formatter with timezone support\n  const dateFormatter = new Intl.DateTimeFormat('en-US', options);\n  \n  // Format the date/time string\n  return dateFormatter.format(new Date(dateString));\n}\n\n// Process each slot and add formatted time strings to the result\nconst slots = $input.item.json.data.slots;\nconst formattedSlots = slots.map(slot => formatTimeSlot(slot.start));\n\n// Attach formatted results to the output\n$input.item.json.data.slots = formattedSlots;\n\nreturn $input.item;\n"
      },
      "id": "d8004e6a-2a60-4a59-976b-424438fdfd51",
      "name": "Enrich Date",
      "type": "n8n-nodes-base.code",
      "position": [
        2672,
        464
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "# Get Slots",
        "height": 80,
        "width": 190,
        "color": 4
      },
      "id": "d7f4a425-591d-4a49-8f02-167a87c8012a",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        432,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Check Availability\n",
        "height": 80,
        "width": 230
      },
      "id": "7a215e7a-8a67-409c-822b-71cf638d9739",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        672,
        544
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Get All Events\n",
        "height": 80,
        "width": 190
      },
      "id": "810cd5f1-7ac6-4cd9-b510-be053152e242",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1200,
        640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Get Available Slots\n\nFormat the slots and Enrich the date and timings\n",
        "height": 100,
        "width": 350
      },
      "id": "7940c3ce-33c3-4b7f-9624-f011acf4486d",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2128,
        640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "calendar",
        "calendar": {
          "__rl": true,
          "value": "c0d34fn@gmail.com",
          "mode": "list",
          "cachedResultName": "Gmail"
        },
        "timeMin": "={{ $json.startTime.toDateTime() }}",
        "timeMax": "={{ $json.endTime.toDateTime() || $now.plus(1, 'hour').toISO() }}",
        "options": {}
      },
      "id": "cad69b1e-1e4b-41ab-88c3-1c596f729f79",
      "name": "Check Availability",
      "type": "n8n-nodes-base.googleCalendar",
      "position": [
        720,
        368
      ],
      "typeVersion": 1.3,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "v8he0NUEHxJLmkeE",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "4a8741a2-a903-4fb7-b0a3-5c74c7eea6ca",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.available }}",
              "rightValue": "="
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "0a3b04aa-6d2b-486c-ba2f-b71b8cd51df3",
      "name": "Check if time is available or not",
      "type": "n8n-nodes-base.if",
      "position": [
        944,
        368
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "c0d34fn@gmail.com",
          "mode": "list",
          "cachedResultName": "Gmail"
        },
        "returnAll": true,
        "options": {
          "timeMin": "={{ $now.toISO() }}",
          "timeMax": "={{ $now.plus(1, 'week').toISO() }}",
          "singleEvents": true,
          "orderBy": "startTime"
        }
      },
      "id": "ce67e942-074f-4301-acfe-57eb0a9ecd80",
      "name": "Get All Calendar Events",
      "type": "n8n-nodes-base.googleCalendar",
      "position": [
        1248,
        464
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "v8he0NUEHxJLmkeE",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1045b97f-c76f-450e-8f57-008602000848",
              "name": "start",
              "type": "string",
              "value": "={{ DateTime.fromISO($json.start.dateTime).toLocaleString(DateTime.DATE_HUGE) }}, {{ DateTime.fromISO($json.start.dateTime).toLocaleString(DateTime.TIME_24_WITH_SHORT_OFFSET) }}"
            },
            {
              "id": "457e3a2b-d33e-4a65-b2da-d19ad9d754ac",
              "name": "end",
              "type": "string",
              "value": "={{ DateTime.fromISO($json.end.dateTime).toLocaleString(DateTime.DATE_HUGE) }}, {{ DateTime.fromISO($json.end.dateTime).toLocaleString(DateTime.TIME_24_WITH_SHORT_OFFSET) }}"
            },
            {
              "id": "b6802452-557e-4568-af14-4574e8ecc013",
              "name": "name",
              "type": "string",
              "value": "={{ $json.summary }}"
            },
            {
              "id": "799b656f-68b6-467c-88a1-217ff7c7801b",
              "name": "sort",
              "type": "string",
              "value": "={{ $json.start.dateTime }}"
            },
            {
              "id": "73dde7e1-fd15-4e3e-b534-290a87e9c0e1",
              "name": "now",
              "value": "={{ $now }}",
              "type": "string"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "id": "09abc4e2-66af-4dc7-9e25-0d8935947404",
      "name": "Extract start, end and name",
      "type": "n8n-nodes-base.set",
      "position": [
        1520,
        464
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "startTime"
            },
            {
              "name": "endTime"
            },
            {
              "name": "timeZone"
            },
            {
              "name": "callId"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        448,
        368
      ],
      "id": "e7986850-670e-4426-a3f7-8db569e15f67",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"callId\": \"{{ $('When Executed by Another Workflow').item.json.callId }}\",\n  \"status\": \"success\",\n  \"message\": \"available\"\n}",
        "options": {}
      },
      "id": "485478e5-1f4b-4b3e-9923-5cef4b747721",
      "name": "Build Response Payload1",
      "type": "n8n-nodes-base.set",
      "position": [
        1248,
        304
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"callId\": \"{{ $('When Executed by Another Workflow').item.json.callId }}\",\n  \"callerNumber\":\"{{ $('When Executed by Another Workflow').item.json.callerNumber }}\",\n  \"status\": \"success\",\n  \"message\": \"{{ $json.message }}\"\n}",
        "options": {}
      },
      "id": "f623a8fd-5251-46a4-b50b-7591d5fb8d4b",
      "name": "Build Response Payload",
      "type": "n8n-nodes-base.set",
      "position": [
        3104,
        464
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "jsCode": "// Get the input data for the first item\nconst inputData = $input.first().json;\nconsole.log(\"Input Data:\", inputData); // Log input for debugging\n\n// Access the message string from the correct path within the input structure.\n// The input comes from the \"Build Response Payload\" node, which structures data under 'results'.\n// Use optional chaining (?.) for safety in case the structure is not as expected.\nlet message = inputData.availableTimes;\n\n// Check if the message was found and is a string\nif (typeof message !== 'string') {\n    console.error(\"Could not find the message string at inputData.results[0].result or it's not a string. Input:\", inputData);\n    // Return an object with an empty message or an error indicator\n    return { message: \"\" }; // Or potentially throw an error: throw new Error(\"Input message not found or not a string\");\n}\n\n// Start cleaning the message string\n\n// 1. Replace the literal string \"\\\\n\" (backslash followed by n) with a space.\n// This handles the newline representation seen in the input screenshot.\nlet cleanedMessage = message.replace(/\\\\n/g, ' ');\n\n// 2. Remove spaces immediately surrounding colons (e.g., \"Times : \" becomes \"Times:\").\ncleanedMessage = cleanedMessage.replace(/\\s*:\\s*/g, ':');\n\n// 3. Replace sequences of multiple whitespace characters (including spaces from replaced \\n)\n// with a single space. Then, trim any leading or trailing whitespace from the result.\ncleanedMessage = cleanedMessage.replace(/\\s+/g, ' ').trim();\n\n// Create the final output JSON object containing the cleaned message.\nconst output = {\n    message: cleanedMessage\n};\n\n// Return the output object. This will be the output of the Code node.\nreturn output;"
      },
      "id": "4ddc0e18-ee22-4c0d-ae79-ea7c587892f1",
      "name": "Escape invalid chars",
      "type": "n8n-nodes-base.code",
      "position": [
        2880,
        464
      ],
      "typeVersion": 2
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "timeZone": "America/Mexico_City",
          "startTime": "2025-07-18T15:00:00-06:00",
          "endTime": "2025-07-18T16:00:00-06:00",
          "callId": "call_vy7F3mqaFaizdw8WtSEcNK2N"
        }
      }
    ]
  },
  "connections": {
    "Sort": {
      "main": [
        [
          {
            "node": "Format response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enrich Date": {
      "main": [
        [
          {
            "node": "Escape invalid chars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Flatten Slots": {
      "main": [
        [
          {
            "node": "Enrich Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format response": {
      "main": [
        [
          {
            "node": "Available Start Times & Ranges",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Availability": {
      "main": [
        [
          {
            "node": "Check if time is available or not",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Calendar Events": {
      "main": [
        [
          {
            "node": "Extract start, end and name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract start, end and name": {
      "main": [
        [
          {
            "node": "Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Available Start Times & Ranges": {
      "main": [
        [
          {
            "node": "Flatten Slots",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if time is available or not": {
      "main": [
        [
          {
            "node": "Build Response Payload1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get All Calendar Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Check Availability",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Response Payload": {
      "main": [
        []
      ]
    },
    "Escape invalid chars": {
      "main": [
        [
          {
            "node": "Build Response Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "44f3c33c-e926-487c-a2ef-163e9c825b23",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9a8aba533b403b88b82ddc10eaf24a3b9ea4720731ee62282249273ac35c2a6f"
  },
  "id": "fIFKCCmMEkTH9MAt",
  "tags": [
    {
      "createdAt": "2025-07-07T20:34:51.228Z",
      "updatedAt": "2025-07-07T20:34:51.228Z",
      "id": "DpoWFufyir7Xw37U",
      "name": "production"
    }
  ]
}